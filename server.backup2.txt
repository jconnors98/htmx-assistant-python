// server.js
import express from "express";
import path from "path";
import { fileURLToPath } from "url";
import cors from "cors";
import dotenv from "dotenv";
import { OpenAI } from "openai";
import { marked } from "marked";
import sanitizeHtml from "sanitize-html";
import { askGemini } from "./gemini.js";

dotenv.config();

if (!process.env.OPENAI_API_KEY || !process.env.GEMINI_API_KEY) {
  console.error("❌ Missing API keys. Check your .env file.");
  process.exit(1);
}

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();
const port = process.env.PORT || 3000;

app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(express.static(path.join(__dirname, "public")));

app.use((req, res, next) => {
  res.setHeader("X-Content-Type-Options", "nosniff");
  res.setHeader("X-Frame-Options", "DENY");
  res.setHeader("Referrer-Policy", "no-referrer");
  next();
});

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

app.post("/ask", async (req, res) => {
  const message = req.body.message?.trim();
  if (!message) {
    return res.send(`<div class="chat-entry assistant"><div class="bubble">⚠️ Message is required.</div></div>`);
  }

  try {
    let gptText = "";
    let geminiText = "";

    // Detect resume/task prompts
    const isTask = message.match(/resume|cover letter|interview|application|write|cv|draft|job history|experience|skills|education/i);

    if (isTask) {
      const gptResult = await openai.chat.completions.create({
        model: "gpt-4",
        messages: [
          {
            role: "system",
            content: `
You're a helpful, warm assistant supporting users on the TalentCentral platform.
You help with construction jobs, resumes, cover letters, and career services in British Columbia.

If the user pastes in a resume or cover letter, review it with constructive feedback like a career coach.
Provide suggestions to improve formatting, clarity, and professionalism.

Use markdown for formatting — bold section titles, use bullet points where helpful, and include helpful resources if needed.
            `.trim(),
          },
          { role: "user", content: message },
        ],
      });
      gptText = gptResult.choices?.[0]?.message?.content || "🤖 GPT had no response.";
    } else {
      geminiText = await askGemini(message);
    }

    const format = (text) =>
      sanitizeHtml(marked.parse(text), {
        allowedTags: sanitizeHtml.defaults.allowedTags.concat(["img"]),
        allowedAttributes: { a: ["href", "target", "rel"], img: ["src", "alt"] },
      });

    const html = `
      <div class="chat-entry assistant">
        <div class="bubble">
          ${geminiText ? `<strong>🌐 Gemini (Search Bot):</strong><div class="markdown">${format(geminiText)}</div><hr/>` : ""}
          ${gptText ? `<strong>🔧 GPT (Task Helper):</strong><div class="markdown">${format(gptText)}</div>` : ""}
        </div>
      </div>
    `;

    res.send(html);
  } catch (err) {
    console.error("❌ Error fetching AI responses:", err);
    res.send(`<div class="chat-entry assistant"><div class="bubble">❌ There was an error getting a response from the assistant.</div></div>`);
  }
});

app.get("*", (req, res) => {
  res.sendFile(path.join(__dirname, "public", "index.html"));
});

app.listen(port, () => {
  console.log(`✅ Assistant is live at http://localhost:${port}`);
});
